// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package valhalla

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6f13d4d4DecodeGithubComLittlemonkeyltdValhallaGoBindings(in *jlexer.Lexer, out *CostingOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "auto":
			(out.Auto).UnmarshalEasyJSON(in)
		case "truck":
			(out.Truck).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f13d4d4EncodeGithubComLittlemonkeyltdValhallaGoBindings(out *jwriter.Writer, in CostingOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"auto\":"
		first = false
		out.RawString(prefix[1:])
		(in.Auto).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"truck\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Truck).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CostingOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f13d4d4EncodeGithubComLittlemonkeyltdValhallaGoBindings(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CostingOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f13d4d4EncodeGithubComLittlemonkeyltdValhallaGoBindings(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CostingOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f13d4d4DecodeGithubComLittlemonkeyltdValhallaGoBindings(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CostingOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f13d4d4DecodeGithubComLittlemonkeyltdValhallaGoBindings(l, v)
}
func easyjson6f13d4d4DecodeGithubComLittlemonkeyltdValhallaGoBindings1(in *jlexer.Lexer, out *CostingOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "country_crossing_penalty":
			out.CountryCrossingPenalty = int(in.Int())
		case "toll_booth_penalty":
			out.TollBoothPenalty = int(in.Int())
		case "country_crossing_cost":
			out.CountryCrossingCost = int(in.Int())
		case "hazmat":
			out.Hazmat = bool(in.Bool())
		case "weight":
			out.Weight = float32(in.Float32())
		case "axle_load":
			out.AxleLoad = float32(in.Float32())
		case "height":
			out.Height = float32(in.Float32())
		case "width":
			out.Width = float32(in.Float32())
		case "length":
			out.Length = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f13d4d4EncodeGithubComLittlemonkeyltdValhallaGoBindings1(out *jwriter.Writer, in CostingOption) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CountryCrossingPenalty != 0 {
		const prefix string = ",\"country_crossing_penalty\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.CountryCrossingPenalty))
	}
	if in.TollBoothPenalty != 0 {
		const prefix string = ",\"toll_booth_penalty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TollBoothPenalty))
	}
	if in.CountryCrossingCost != 0 {
		const prefix string = ",\"country_crossing_cost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CountryCrossingCost))
	}
	if in.Hazmat {
		const prefix string = ",\"hazmat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Hazmat))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Weight))
	}
	if in.AxleLoad != 0 {
		const prefix string = ",\"axle_load\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AxleLoad))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Height))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Width))
	}
	if in.Length != 0 {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Length))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CostingOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f13d4d4EncodeGithubComLittlemonkeyltdValhallaGoBindings1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CostingOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f13d4d4EncodeGithubComLittlemonkeyltdValhallaGoBindings1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CostingOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f13d4d4DecodeGithubComLittlemonkeyltdValhallaGoBindings1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CostingOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f13d4d4DecodeGithubComLittlemonkeyltdValhallaGoBindings1(l, v)
}
