// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package valhalla

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2fb67707DecodeGithubComLittlemonkeyltdValhallaGoBindings(in *jlexer.Lexer, out *ElevationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "encoded_polyline":
			out.EncodedPolyline = string(in.String())
		case "range_height":
			if in.IsNull() {
				in.Skip()
				out.RangeHeight = nil
			} else {
				in.Delim('[')
				if out.RangeHeight == nil {
					if !in.IsDelim(']') {
						out.RangeHeight = make([][]float64, 0, 2)
					} else {
						out.RangeHeight = [][]float64{}
					}
				} else {
					out.RangeHeight = (out.RangeHeight)[:0]
				}
				for !in.IsDelim(']') {
					var v1 []float64
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]float64, 0, 8)
							} else {
								v1 = []float64{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 float64
							v2 = float64(in.Float64())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.RangeHeight = append(out.RangeHeight, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "height":
			if in.IsNull() {
				in.Skip()
				out.Height = nil
			} else {
				in.Delim('[')
				if out.Height == nil {
					if !in.IsDelim(']') {
						out.Height = make([]float64, 0, 8)
					} else {
						out.Height = []float64{}
					}
				} else {
					out.Height = (out.Height)[:0]
				}
				for !in.IsDelim(']') {
					var v3 float64
					v3 = float64(in.Float64())
					out.Height = append(out.Height, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "shape":
			if in.IsNull() {
				in.Skip()
				out.Shape = nil
			} else {
				in.Delim('[')
				if out.Shape == nil {
					if !in.IsDelim(']') {
						out.Shape = make([]ElevationPoint, 0, 4)
					} else {
						out.Shape = []ElevationPoint{}
					}
				} else {
					out.Shape = (out.Shape)[:0]
				}
				for !in.IsDelim(']') {
					var v4 ElevationPoint
					(v4).UnmarshalEasyJSON(in)
					out.Shape = append(out.Shape, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2fb67707EncodeGithubComLittlemonkeyltdValhallaGoBindings(out *jwriter.Writer, in ElevationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"encoded_polyline\":"
		out.RawString(prefix[1:])
		out.String(string(in.EncodedPolyline))
	}
	{
		const prefix string = ",\"range_height\":"
		out.RawString(prefix)
		if in.RangeHeight == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.RangeHeight {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v7, v8 := range v6 {
						if v7 > 0 {
							out.RawByte(',')
						}
						out.Float64(float64(v8))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		if in.Height == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Height {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.Shape) != 0 {
		const prefix string = ",\"shape\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Shape {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElevationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2fb67707EncodeGithubComLittlemonkeyltdValhallaGoBindings(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElevationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2fb67707EncodeGithubComLittlemonkeyltdValhallaGoBindings(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElevationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2fb67707DecodeGithubComLittlemonkeyltdValhallaGoBindings(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElevationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2fb67707DecodeGithubComLittlemonkeyltdValhallaGoBindings(l, v)
}
func easyjson2fb67707DecodeGithubComLittlemonkeyltdValhallaGoBindings1(in *jlexer.Lexer, out *ElevationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "height_precision":
			if in.IsNull() {
				in.Skip()
				out.HeightPrecision = nil
			} else {
				if out.HeightPrecision == nil {
					out.HeightPrecision = new(int)
				}
				*out.HeightPrecision = int(in.Int())
			}
		case "id":
			out.ID = string(in.String())
		case "range":
			out.Range = bool(in.Bool())
		case "shape_format":
			out.ShapeFormat = string(in.String())
		case "encoded_polyline":
			out.EncodedPolyline = string(in.String())
		case "shape":
			if in.IsNull() {
				in.Skip()
				out.Shape = nil
			} else {
				in.Delim('[')
				if out.Shape == nil {
					if !in.IsDelim(']') {
						out.Shape = make([]ElevationPoint, 0, 4)
					} else {
						out.Shape = []ElevationPoint{}
					}
				} else {
					out.Shape = (out.Shape)[:0]
				}
				for !in.IsDelim(']') {
					var v13 ElevationPoint
					(v13).UnmarshalEasyJSON(in)
					out.Shape = append(out.Shape, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resample_distance":
			if in.IsNull() {
				in.Skip()
				out.ResampleDistance = nil
			} else {
				if out.ResampleDistance == nil {
					out.ResampleDistance = new(int)
				}
				*out.ResampleDistance = int(in.Int())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2fb67707EncodeGithubComLittlemonkeyltdValhallaGoBindings1(out *jwriter.Writer, in ElevationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.HeightPrecision != nil {
		const prefix string = ",\"height_precision\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(*in.HeightPrecision))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"range\":"
		out.RawString(prefix)
		out.Bool(bool(in.Range))
	}
	if in.ShapeFormat != "" {
		const prefix string = ",\"shape_format\":"
		out.RawString(prefix)
		out.String(string(in.ShapeFormat))
	}
	if in.EncodedPolyline != "" {
		const prefix string = ",\"encoded_polyline\":"
		out.RawString(prefix)
		out.String(string(in.EncodedPolyline))
	}
	if len(in.Shape) != 0 {
		const prefix string = ",\"shape\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Shape {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.ResampleDistance != nil {
		const prefix string = ",\"resample_distance\":"
		out.RawString(prefix)
		out.Int(int(*in.ResampleDistance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElevationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2fb67707EncodeGithubComLittlemonkeyltdValhallaGoBindings1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElevationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2fb67707EncodeGithubComLittlemonkeyltdValhallaGoBindings1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElevationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2fb67707DecodeGithubComLittlemonkeyltdValhallaGoBindings1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElevationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2fb67707DecodeGithubComLittlemonkeyltdValhallaGoBindings1(l, v)
}
func easyjson2fb67707DecodeGithubComLittlemonkeyltdValhallaGoBindings2(in *jlexer.Lexer, out *ElevationPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			out.Lat = float64(in.Float64())
		case "lon":
			out.Lon = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2fb67707EncodeGithubComLittlemonkeyltdValhallaGoBindings2(out *jwriter.Writer, in ElevationPoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lat\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Lat))
	}
	{
		const prefix string = ",\"lon\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lon))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElevationPoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2fb67707EncodeGithubComLittlemonkeyltdValhallaGoBindings2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElevationPoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2fb67707EncodeGithubComLittlemonkeyltdValhallaGoBindings2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElevationPoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2fb67707DecodeGithubComLittlemonkeyltdValhallaGoBindings2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElevationPoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2fb67707DecodeGithubComLittlemonkeyltdValhallaGoBindings2(l, v)
}
